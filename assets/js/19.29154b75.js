(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{303:function(t,e,a){"use strict";a.r(e);var s=a(9),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"用js实现网页录屏模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用js实现网页录屏模块","aria-hidden":"true"}},[t._v("#")]),t._v(" 用js实现网页录屏模块")]),t._v(" "),a("p",[t._v("随着前端技术的不断发展，前端能做的事情似乎越来越多了。今天分享一个用js来实现的录屏方案。")]),t._v(" "),a("h2",{attrs:{id:"使用到的api详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用到的api详解","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用到的API详解")]),t._v(" "),a("h3",{attrs:{id:"mediadevices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mediadevices","aria-hidden":"true"}},[t._v("#")]),t._v(" mediaDevices")]),t._v(" "),a("ol",[a("li",[t._v("mediaDevices提供访问连接媒体输入的设备，如照相机和麦克风，以及屏幕共享等")]),t._v(" "),a("li",[t._v("属性")])]),t._v(" "),a("ul",[a("li",[t._v("ondevicechange 用户选择输入设备的时候触发，比如说用户有多个摄像头或者有多个麦克风这种")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("方法：")])]),t._v(" "),a("ul",[a("li",[t._v("enumerateDevices 获取系统中可用的媒体输入和输出设备等信息")]),t._v(" "),a("li",[t._v("getSupportedConstraints 不是很理解这个api，大概是获取一个音视频轨道的可支持信息。Tips原文：基于MediaTrack 支持约束字典的新对象，列出用户代理支持的约束。由于列表中仅包含用户代理支持的约束，因此这些布尔属性中的每一个都有值")]),t._v(" "),a("li",[t._v("getUserMedia(constraints) 打开系统上的相机或屏幕共享和/或麦克风，并提供 MediaStream 包含视频轨道和/或音频轨道的输入，获取的时候，浏览器会在左上角弹出授权按钮，需要授权之后，才能获取具体的值\nconstraints参数说明"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 简单，是否设置音/视频")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" audio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" video"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 制定视频(最大/小)分辨率, 或设置一个参考值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  audio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// audio: { deviceId：  }")]),t._v("\n  video"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1280")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("720")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// min: 1024, ideal: 1280, max: 1920")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置前置或后置摄像头 user/environment 前/后")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deviceId 设备id, 可以通过enumerateDevices获取")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("getDisplayMedia(constraints) 选择捕获的显示器或窗口,constraints与getUserMedia相同")])]),t._v(" "),a("h3",{attrs:{id:"mediarecorder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mediarecorder","aria-hidden":"true"}},[t._v("#")]),t._v(" MediaRecorder")]),t._v(" "),a("ol",[a("li",[t._v("构造函数会创建一个对指定的 MediaStream 进行录制的 MediaRecorder 对象")]),t._v(" "),a("li",[t._v("参数：")])]),t._v(" "),a("ul",[a("li",[t._v("stream：MediaStream 将要录制的流，可以来自MediaDevices.getUserMedia，audio，video或canvas")]),t._v(" "),a("li",[t._v("options(可选): 一个字典对象,它可以包含下列属性\n"),a("ol",[a("li",[t._v("mimeType 为新构建的 MediaRecorder 指定录制容器的MIME类型. 在应用中通过调用 MediaRecorder.isTypeSupported() 来检查浏览器是否支持此种mimeType")]),t._v(" "),a("li",[t._v("audioBitsPerSecond: 指定音频的码率")]),t._v(" "),a("li",[t._v("videoBitsPerSecond: 指定视频的码率")]),t._v(" "),a("li",[t._v("bitsPerSecond: 指定音频和视频的码率. 可以作为audioBitsPerSecond/videoBitsPerSecond的备选项")])])])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("属性")])]),t._v(" "),a("ul",[a("li",[t._v("audioBitsPerSecond 只读属性. 它返回录制器实际所使用的音频编码码率（不一定与参数中设置的值一致）")]),t._v(" "),a("li",[t._v("mimeType 只读属性 返回创建MediaRecorder对象时指定的 MIME 媒体类型或者浏览器选择的MIME媒体类型")]),t._v(" "),a("li",[t._v("ondataavailable/ondata 获取到可用的流信息时触发，返回一个回调函数，可以在回调中收集媒体设备获得到的可以使用的数据")]),t._v(" "),a("li",[t._v("onerror 出错的时候触发")]),t._v(" "),a("li",[t._v("onpause 暂停录制的时候触发")]),t._v(" "),a("li",[t._v("onresume 恢复录制的时候触发")]),t._v(" "),a("li",[t._v("onstart 开始的时候触发")]),t._v(" "),a("li",[t._v("onstop 与暂停不同，该事件只会在结束录制的时候触发")]),t._v(" "),a("li",[t._v("state 只读属性 返回当前对象的当前状态\n"),a("ol",[a("li",[t._v("inactive 录制未发生 - 它尚未启动，或者已经停止")]),t._v(" "),a("li",[t._v("recording 录制已启动，UA 正在捕获数据")]),t._v(" "),a("li",[t._v("paused 录制已启动，然后暂停，但尚未停止或恢复")])])]),t._v(" "),a("li",[t._v("stream 只读属性返 回创建时传递到构造函数的流")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("方法")])]),t._v(" "),a("ul",[a("li",[t._v("isTypeSupported 返回一个布尔值，用于校验设置的mimeType是否支持")]),t._v(" "),a("li",[t._v("pause 暂停录制 Tips: 如果当前state等于inactive的时候，会抛出异常")]),t._v(" "),a("li",[t._v("requestData 用于触发ondataavailable")]),t._v(" "),a("li",[t._v("resume 恢复录制")]),t._v(" "),a("li",[t._v("start 开始录制")]),t._v(" "),a("li",[t._v("stop 结束录制")])])])}),[],!1,null,null,null);e.default=n.exports}}]);
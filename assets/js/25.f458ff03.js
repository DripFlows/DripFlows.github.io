(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{309:function(e,t,a){"use strict";a.r(t);var s=a(9),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"ts泛型积累"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts泛型积累","aria-hidden":"true"}},[e._v("#")]),e._v(" TS泛型积累")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ConstructorParameters<T>")]),e._v(" -- 提取构造函数中参数类型")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class TestClass {\n    constructor(public name: string, public age: number) {}\n}\n  \ntype R2 = ConstructorParameters<typeof TestClass> // [string, number]\n")])])]),a("ul",[a("li",[a("code",[e._v("Partial")]),e._v(" - 将属性全部变为可选")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Partial<T> = { [P in keyof T]?: T[P] };\n")])])]),a("ul",[a("li",[a("code",[e._v("DeepPartial")]),e._v(" - 递归将深层属性变为可选")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type DeepPartial<T> = {\n    [U in keyof T]?: T[U] extends object\n    ? DeepPartial<T[U]>\n    : T[U]\n};\n\ntype R2 = DeepPartial<Person>\n")])])]),a("ul",[a("li",[a("code",[e._v("+/-")]),e._v(" -  用于映射类型中给属性添加修饰符,比如-?就代表将可选属性变为必选,-readonly代表将只读属性变为非只读.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Required<T> = { [P in keyof T]-?: T[P] };\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P]\n}\n")])])]),a("ul",[a("li",[a("code",[e._v("Exclude<T>")]),e._v(" - 从 T 中排除出可分配给 U的元素.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Exclude<T, U> = T extends U ? never : T;\ntype T = Exclude<1 | 2, 1 | 3> // -> 2\n")])])]),a("ul",[a("li",[a("code",[e._v("Pick<T, K>")]),e._v(" - 从 T 中取出 一系列 K 的属性")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Pick<T, K extends keyof T> = { [P in K]: T[P] };\n")])])]),a("ul",[a("li",[a("code",[e._v("Omit<T, K>")]),e._v(" - 忽略T中的某些属性.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Omit<T, K> = Pick<T, Exclude<keyof T, K>>\n\ntype Foo = Omit<{name: string, age: number}, 'name'> // -> { age: number }\n")])])]),a("ul",[a("li",[a("code",[e._v("Required<T>")]),e._v(" - 将传入的属性变为必选项")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Required<T> = { [P in keyof T]-?: T[P] };\n")])])]),a("ul",[a("li",[a("code",[e._v("Readonly<T>")]),e._v(" - 将传入的属性变为只读选项")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Readonly<T> = { readonly [P in keyof T]: T[P] };\n")])])]),a("ul",[a("li",[a("code",[e._v("Record<T>")]),e._v(" - 将 K 中所有的属性的值转化为 T 类型")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Record<K extends keyof any, T> = { [P in K]: T };\n\ntype Car = 'Audi' | 'BMW' | 'MercedesBenz'\ntype CarList = Record<Car, {age: number}>\n\nconst cars: CarList = {\n    Audi: { age: 119 },\n    BMW: { age: 113 },\n    MercedesBenz: { age: 133 },\n}\n")])])]),a("ul",[a("li",[a("code",[e._v("Extract<T, U>")]),e._v(" - 提取出 T 包含在 U 中的元素/从 T 中提取出 U")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Extract<T, U> = T extends U ? T : never;\n")])])]),a("ul",[a("li",[a("code",[e._v("ReturnType<T>")]),e._v(" - 用它获取函数的返回类型")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type ReturnType<T> = T extends (\n  ...args: any[]\n) => infer R\n  ? R\n  : any;\n")])])]),a("ul",[a("li",[a("code",[e._v("AxiosReturnType")]),e._v(" - 获取Axios函数的返回类型")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { AxiosPromise } from 'axios' // 导入接口\ntype AxiosReturnType<T> = T extends (...args: any[]) => AxiosPromise<infer R> ? R : any\n\n// 使用\ntype Resp = AxiosReturnType<Api> // 泛型参数中传入你的 Api 请求函数\n")])])]),a("ul",[a("li",[a("code",[e._v("Compute")]),e._v(" - 将交叉类型合并")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Compute<A extends any> =\n    A extends Function\n    ? A\n    : { [K in keyof A]: A[K] }\n\ntype R1 = Compute<{x: 'x'} & {y: 'y'}>\n")])])]),a("ul",[a("li",[a("code",[e._v("Merge<01, 02>")]),e._v(" - 将两个对象的属性合并")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Merge<O1 extends object, O2 extends object> =\n    Compute<O1 & Omit<O2, keyof O1>>\n")])])]),a("ul",[a("li",[a("code",[e._v("Intersection<T, U>")]),e._v(" - 取T的属性")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Intersection<T extends object, U extends object> = Pick<\n  T,\n  Extract<keyof T, keyof U> & Extract<keyof U, keyof T>\n>;\n")])])]),a("ul",[a("li",[a("code",[e._v("Diff<T, U>")]),e._v(" - 取出T类型中U不包含的部分:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Diff<T, U> = T extends U ? never : T;\n")])])]),a("ul",[a("li",[a("code",[e._v("Filter<T, U>")]),e._v(" - 取出T能赋给U的类型")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Filter<T, U> = T extends U ? T : never;\ntype R1 = Filter<string | number | (() => void), Function>; // () => void\n")])])]),a("ul",[a("li",[a("code",[e._v("NonNullable<T>")]),e._v(" - 剔除 null和undefined")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type NonNullable<T> = Diff<T, null | undefined>;\n")])])]),a("ul",[a("li",[a("code",[e._v("Overwrite<T, U>")]),e._v(" - 用U的属性覆盖T的相同属性")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Overwrite<\n  T extends object,\n  U extends object,\n  I = Diff<T, U> & Intersection<U, T>\n> = Pick<I, keyof I>;\n\ntype Props = { name: string; age: number; visible: boolean };\ntype NewProps = { age: string; other: string };\n\n// Expect: { name: string; age: string; visible: boolean; }\ntype ReplacedProps = Overwrite<Props, NewProps>\n")])])]),a("ul",[a("li",[a("code",[e._v("Mutable")]),e._v(" - 将 T 的所有属性的 readonly 移除")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Mutable<T> = {\n  -readonly [P in keyof T]: T[P]\n}\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);